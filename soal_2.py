# -*- coding: utf-8 -*-
"""soal2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18taOkvMQPSeXMT7j2g-GcnUOd4ksXcWu

# **First Step**
"""

!pip install Bio

import pandas as pd
from Bio import SeqIO

seq_objetcs = SeqIO.parse("/content/drive/MyDrive/Kampus/Semester 7/Bio Infor/Project/Soal2/repbase_joinedseq.fasta", "fasta")

"""# **Processing 1**"""

sequences = []

for seq in seq_objetcs:
  sequences.append(seq)

id = []
name = []
description = []
sequence = []
length = []
for i in range(len(sequences)):
  id.append(sequences[i].id)
  name.append(sequences[i].name)
  description.append(sequences[i].description)
  sequence.append(sequences[i].seq)
  length.append(len(sequences[i]))

for i in range(len(sequences)):
  print(id[i])
  print(sequence[i])
  print(length[i])
  print()

df = pd.DataFrame()
df['id'] = id
df['sequence'] = sequence
df['length'] = length

df

"""# **Processing 2**
[source](https://bi1.caltech.edu/code/t01_sequence_analysis.html)
"""

data1 = []
data2 = []
compare = []


itr1 = 0
itr2 = 1

# compare between sequences 
for i in range(0,2467):
  len1 = df.id[i]
  if i == 2466:
    data1.append(df['id'][i])
    data2.append(df['id'][0])
    compared_length = (len1 == df.id[0])
    compare.append(compared_length)
  else:
    data1.append(df['id'][i])
    data2.append(df['id'][i+1])
    compared_length = (len1 == df.id[i+1])
    compare.append(compared_length)

def similarity(itr1,itr2):
  noronha_seq = df['sequence'][itr1]
  brazil_seq = df['sequence'][itr2]

  if len(noronha_seq) > len(brazil_seq):
    brazil_length = len(df['sequence'][itr2])
  else:
    brazil_length = len(df['sequence'][itr1])

  # Set up a counter to keep track of how many bases are identical.
  num_sim = 0

  # Set up a counter to keep track of how many positions we've compared.
  comp_length = 0

  # Iterate through each position in the sequences and compare.
  for base in range(brazil_length):
      
      # Make sure we are not comparing a gap.
      if (noronha_seq[base] != '-') and (brazil_seq[base] != '-'):
          
          # Add one position to our counter of the comparison length.
          comp_length += 1   # Note this is same as comp_length = comp_length + 1
        
          # Compare the position and each sequence.
          if noronha_seq[base] == brazil_seq[base]:
              
              # If they are the same, add that to our counter.
              num_sim += 1
              
  # Now compute the percent similarity and print it.
  score = num_sim / comp_length

  return score

similarities = []

for i in range(2467):
  if i != 2466:
    similarities.append(round(similarity(i, i+1)*100, 2))
  else:
    similarities.append(round(similarity(i, 0)*100, 2))

indeks = []

for i in range(2467):
  indeks.append(i+1)

"""# **Data**"""

NewData = pd.DataFrame()
NewData['no'] = indeks
NewData['sequence_1'] = data1
NewData['sequence_2'] = data2
NewData['compare'] = compare
NewData['similarity'] = similarities

NewData

# scatter similarity
print(NewData.plot.scatter(x = 'no', y = 'similarity'))

NewData[NewData['similarity'] > 75.0]

"""# **Experiment**"""

id2 = []
name2 = []
description2 = []
sequence2 = []
length2 = []
for i in range(len(sequences)):
  id2.append(sequences[i].id)
  name2.append(sequences[i].name)
  description2.append(sequences[i].description)
  sequence2.append(sequences[i].seq[0:58])
  length2.append(len(sequences[i]))

df2 = pd.DataFrame()
df2['id'] = id
df2['sequence'] = sequence
df2['length'] = length

transcribe = []
for i in range(len(df2)):
  transcribe.append(df2['sequence'][i].transcribe())

transcribe

df2['transcribe'] = pd.DataFrame(transcribe)

df2['sequence']

# https://www.biostars.org/p/142519/
list_name = []
list_sequence = []

for i in range(len(df2)):
  list_name.append(str(df2['id'][i]))
  list_sequence.append(str(df2['transcribe'][i]))

ofile = open("/content/drive/MyDrive/Kampus/Semester 7/Bio Infor/Project/Soal2/fasta/newfasta4.fasta", "w")

for i in range(2000,2467):

  ofile.write(">" + list_name[i] + "\n" + list_sequence[i] + "\n")

#do not forget to close it

ofile.close()